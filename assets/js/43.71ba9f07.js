(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{450:function(t,a,e){"use strict";e.r(a);var s=e(29),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[t._v("#")]),t._v(" 事件")]),t._v(" "),e("h2",{attrs:{id:"事件三要素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件三要素"}},[t._v("#")]),t._v(" 事件三要素")]),t._v(" "),e("p",[t._v("事件源、事件、事件驱动程序.")]),t._v(" "),e("blockquote",[e("p",[t._v("事件源：事件来源，事件触发来源"),e("br"),t._v("\n事件：触发的是什么时间、click、mouserover 等等"),e("br"),t._v("\n事件驱动程序：触发该事件后需要 执行的操作，其实就是回调，稍微展开一丁点，如果监听了并触发是生成一个事件任务打包进事件队列。"),e("a",{attrs:{href:"./eventloop"}},[t._v("事件循环")])])]),t._v(" "),e("h2",{attrs:{id:"事件流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件流"}},[t._v("#")]),t._v(" 事件流")]),t._v(" "),e("p",[t._v("事件发生过程，基于 w3c 标准，dom 结构下，产生一系列由根元素到目标元素再到根元素分别触发对应事件的过程，叫事件流。")]),t._v(" "),e("h3",{attrs:{id:"根元素到目标元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#根元素到目标元素"}},[t._v("#")]),t._v(" 根元素到目标元素")]),t._v(" "),e("p",[t._v("称为"),e("code",[t._v("事件捕获")]),t._v("，其中，不包括目标元素，")]),t._v(" "),e("h3",{attrs:{id:"目标元素到根元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目标元素到根元素"}},[t._v("#")]),t._v(" 目标元素到根元素")]),t._v(" "),e("p",[t._v("称为"),e("code",[t._v("事件冒泡")]),t._v("。其中包含了目标元素")]),t._v(" "),e("h3",{attrs:{id:"addeventlistener"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#addeventlistener"}},[t._v("#")]),t._v(" addEventListener")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("element.addEventListener(event, function, useCapture)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("event：事件名"),e("br"),t._v("\nfunction： 事件驱动程序"),e("br"),t._v("\nuseCapture：是否在捕获阶段发生，默认为 false（即默认冒泡阶段）")]),t._v(" "),e("h3",{attrs:{id:"事件代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件代理"}},[t._v("#")]),t._v(" 事件代理")]),t._v(" "),e("p",[t._v("在需要对同个父元素下的子元素监听相同的事件并事件驱动程序也是相同时，我们可以利用事件流的特性，直接在监听父元素事件，利用冒泡机制。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("监听特定元素，使用 on 方法监听，并在第二个参数里设定对应标签")])]),t._v(" "),e("h2",{attrs:{id:"事件对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件对象"}},[t._v("#")]),t._v(" 事件对象")]),t._v(" "),e("p",[t._v("Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。")]),t._v(" "),e("h2",{attrs:{id:"preventdefault"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#preventdefault"}},[t._v("#")]),t._v(" preventDefault")]),t._v(" "),e("p",[t._v("event.preventDefault(),取消事件的默认行为，例如提交表单的 button 等等，事件驱动程序内部调用。")]),t._v(" "),e("h2",{attrs:{id:"stoppropagation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stoppropagation"}},[t._v("#")]),t._v(" stopPropagation")]),t._v(" "),e("p",[t._v("event.stopPropagation()，防止调用相同事件的传播，阻止冒泡和捕获。事件驱动程序内部调用。")]),t._v(" "),e("h2",{attrs:{id:"cancelbubble"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cancelbubble"}},[t._v("#")]),t._v(" cancelBubble")]),t._v(" "),e("p",[t._v("如果事件对象的 cancelBubble 属性被设置为 true, 则会阻止事件继续向上冒泡（也可以阻止事件的捕获）。事件驱动程序内部设定，event.cancelBubble = true;")]),t._v(" "),e("h2",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),e("p",[t._v("事件分为三要素，其中存在事件捕获和冒泡， 默认是冒泡，因为捕获仍存在浏览器兼容性问题，事件代理原理就是事件冒泡，包含两个常用 api，取消默认行为及阻止事件传递。")])])}),[],!1,null,null,null);a.default=r.exports}}]);