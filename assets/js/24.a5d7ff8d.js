(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{425:function(t,a,e){"use strict";e.r(a);var s=e(29),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),e("h2",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),e("p",[t._v("设计模式，即 Design Patterns，是指在软件设计中，被反复使用的一种代码设计经验。使用设计模式的目的是为了可重用代码，提高代码的可扩展性和可维护性。")]),t._v(" "),e("p",[t._v("设计模式这个术语是上个世纪 90 年代由 Erich Gamma、Richard Helm、Raplh Johnson 和 Jonhn Vlissides 四个人总结提炼出来的，并且写了一本 Design Patterns 的书。这四人也被称为四人帮（GoF）。")]),t._v(" "),e("p",[t._v("为什么要使用设计模式？根本原因还是软件开发要实现可维护、可扩展，就必须尽量复用代码，并且降低代码的耦合度。设计模式主要是基于 OOP 编程提炼的，它基于以下几个原则：")]),t._v(" "),e("p",[e("code",[t._v("开闭原则")]),t._v("\n由 Bertrand Meyer 提出的开闭原则（Open Closed Principle）是指，软件应该对扩展开放，而对修改关闭。这里的意思是在增加新功能的时候，能不改代码就尽量不要改，如果只增加代码就完成了新功能，那是最好的。")]),t._v(" "),e("p",[e("code",[t._v("里氏替换原则")]),t._v("\n里氏替换原则是 Barbara Liskov 提出的，这是一种面向对象的设计原则，即如果我们调用一个父类的方法可以成功，那么替换成子类调用也应该完全可以运行。")]),t._v(" "),e("p",[t._v("设计模式把一些常用的设计思想提炼出一个个模式，然后给每个模式命名，这样在使用的时候更方便交流。GoF 把 23 个常用模式分为创建型模式、结构型模式和行为型模式三类，我们后续会一一讲解。")]),t._v(" "),e("p",[t._v("学习设计模式，关键是学习设计思想，不能简单地生搬硬套，也不能为了使用设计模式而过度设计，要合理平衡设计的复杂度和灵活性，并意识到设计模式也并不是万能的。")]),t._v(" "),e("h2",{attrs:{id:"我的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#我的理解"}},[t._v("#")]),t._v(" 我的理解")]),t._v(" "),e("p",[t._v("大学刚毕业的时候那时候是写 PHP 的，PHP 也算一种很典型的面相对象语言，那时候就研究过设计模式，所谓设计模式，是人类长期代码整理、归纳、研究的等等一系列让代码整理起来规范的写代码方式。")]),t._v(" "),e("p",[t._v("就是说软件发展这么久，总有部分可以形成某种约定或者说规范，这类东西就成为设计模式。")])])}),[],!1,null,null,null);a.default=r.exports}}]);