(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{399:function(t,a,v){t.exports=v.p+"assets/img/hoap.d4e1f9f8.png"},448:function(t,a,v){"use strict";v.r(a);var s=v(29),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"js-事件机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-事件机制"}},[t._v("#")]),t._v(" JS 事件机制")]),t._v(" "),s("h2",{attrs:{id:"导读-赶时间可以忽略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导读-赶时间可以忽略"}},[t._v("#")]),t._v(" 导读-赶时间可以忽略")]),t._v(" "),s("p",[t._v("我们知道 JavaScript 是一门浏览器语言，而浏览器主要是与用户进行交互，用户当然不希望浏览器背着用户运算着什么东西，因此，与用户的交互需要时一次触发一次反馈连续，因为这样的特性，JavaScript 被设定为单线程语言，所谓单线程，指的是 JavaScript 引擎只能开启一个线程只有一个"),s("code",[t._v("执行栈")]),t._v("（调用栈），所有的函数都必须通过这个执行栈执行。")]),t._v(" "),s("h2",{attrs:{id:"正文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正文"}},[t._v("#")]),t._v(" 正文")]),t._v(" "),s("h3",{attrs:{id:"非阻塞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞"}},[t._v("#")]),t._v(" 非阻塞")]),t._v(" "),s("p",[t._v("非阻塞是当代码需要进行一项"),s("code",[t._v("异步任务")]),t._v("（无法立刻返回结果，需要花一定时间才能返回的任务，如 I/O 事件）的时候，主线程会挂起（pending）这个任务，然后在异步任务返回结果的时候再根据一定规则去执行相应的回调。")]),t._v(" "),s("h3",{attrs:{id:"并发模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发模型"}},[t._v("#")]),t._v(" 并发模型")]),t._v(" "),s("p",[t._v("JavaScript 是单线程，但浏览器使用环境并不是，浏览器存在不少阻塞的情况，为了处理这种情况，JavaScript 有一个基于事件循环的并发模型，事件循环负责执行代码、收集和处理事件以及执行队列中的子任务。")]),t._v(" "),s("h3",{attrs:{id:"栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),s("p",[t._v("函数调用形成了一个由若干帧组成的栈。")]),t._v(" "),s("h3",{attrs:{id:"堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[t._v("#")]),t._v(" 堆")]),t._v(" "),s("p",[t._v("对象被分配在堆中，堆是一个用来表示一大块（通常是非结构化的）内存区域的计算机术语。")]),t._v(" "),s("h3",{attrs:{id:"队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[t._v("#")]),t._v(" 队列")]),t._v(" "),s("p",[t._v("一个 JavaScript 运行时包含了一个待处理消息的消息队列。每一个消息都关联着一个用以处理这个消息的回调函数。")]),t._v(" "),s("h3",{attrs:{id:"执行结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行结构"}},[t._v("#")]),t._v(" 执行结构")]),t._v(" "),s("p",[s("img",{attrs:{src:v(399),alt:"事件循环",align:"center"}}),t._v("\n在上图中，调用栈中遇到"),s("code",[t._v("DOM操作")]),t._v("、"),s("code",[t._v("ajax请求")]),t._v("以及"),s("code",[t._v("setTimeout")]),t._v("等 WebAPIs 的时候就会交给浏览器内核的其他模块进行处理，webkit 内核在 Javasctipt 执行引擎之外，有一个重要的模块是 webcore 模块。对于图中 WebAPIs 提到的三种 API，webcore 分别提供了"),s("code",[t._v("DOM Binding")]),t._v("、"),s("code",[t._v("network")]),t._v("、"),s("code",[t._v("timer")]),t._v("模块来处理底层实现。等到这些模块处理完这些操作的时候将回调函数放入任务队列中，之后等栈中的 task 执行完之后再去执行任务队列之中的回调函数。")]),t._v(" "),s("h3",{attrs:{id:"消息队列和事件循环的配合-♻️"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息队列和事件循环的配合-♻️"}},[t._v("#")]),t._v(" 消息队列和事件循环的配合 ♻️")]),t._v(" "),s("p",[t._v("其实事件循环机制和消息队列的维护是由"),s("code",[t._v("事件触发线程")]),t._v("控制的。事件触发线程同样是浏览器渲染引擎提供的，它会维护一个消息队列。JS 引擎线程遇到异步（DOM 事件监听、网络请求、setTimeout 计时器等），会交给相应的线程单独去维护异步任务，等待某个时机（计时器结束、网络请求成功、用户点击 DOM），然后由事件触发线程将异步对应的回调函数封装成任务并加入到消息队列中对应的任务队列中，等待被执行。")]),t._v(" "),s("h3",{attrs:{id:"宏任务与微任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#宏任务与微任务"}},[t._v("#")]),t._v(" 宏任务与微任务")]),t._v(" "),s("p",[t._v("通常我们把消息队列中的任务称为"),s("code",[t._v("宏任务")]),t._v("，每个"),s("code",[t._v("宏任务")]),t._v("中都包含了一个"),s("code",[t._v("微任务队列")]),t._v("，在执行宏任务的过程中，如果 DOM 有变化，那么就会将该变化添加到微任务列表中，这样就不会影响到宏任务的继续执行，因此也就解决了执行效率的问题。等宏任务中的主要功能都直接完成之后，这时候，渲染引擎并不着急去执行下一个宏任务，而是执行当前宏任务中的"),s("code",[t._v("微任务")]),t._v("，因为 DOM 变化的事件都保存在这些微任务队列中，这样也就解决了实时性问题。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("ul",[s("li",[t._v("MacroTask（宏观 Task） setTimeout, setInterval, requestAnimationFrame, I/O")]),t._v(" "),s("li",[t._v("MicroTask（微观任务） process.nextTick, Promise（的 then,Promise 本身是同步）, Object observe, MutationObserver")])])]),t._v(" "),s("p",[t._v("先执行同步代码，再取出第一个宏任务执行，所有的相关微任务总会在下一个宏任务之前全部执行完毕，如果执行完同步代码时有微任务就先微后宏。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("浏览器有"),s("code",[t._v("webcore模块")]),t._v("和"),s("code",[t._v("事件触发线程")]),t._v("分别负责执行异步代码和维护消息队列，当 JavaScript 主线程在遇到阻塞 io 操作时，会分辨是宏任务还是微任务，微任务直接添加进微任务队列，宏任务会交由浏览器模块执行，执行完成后会由时间触发线程把异步函数打包成任务再添加进宏任务队列，待执行栈里面的同步代码都执行完了，就会先看看是否存在微任务，有则执行，随后从宏任务队列拎一个任务到执行栈执行，接着在看是否有微任务......，这样一个过程，就是 JavaScript 的事件循环机制。")])])}),[],!1,null,null,null);a.default=e.exports}}]);