(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{402:function(s,t,a){s.exports=a.p+"assets/img/diff.75227d91.png"},403:function(s,t,a){s.exports=a.p+"assets/img/diff-detail.fa0b874e.png"},404:function(s,t,a){s.exports=a.p+"assets/img/diff-key.548f479f.png"},405:function(s,t,a){s.exports=a.p+"assets/img/Renderingprocess.01db136b.png"},406:function(s,t,a){s.exports=a.p+"assets/img/generate.c5cb0dfd.jpg"},407:function(s,t,a){s.exports=a.p+"assets/img/babel+ast.8e0ca5ef.png"},408:function(s,t,a){s.exports=a.p+"assets/img/vue+ast.e56d5422.png"},462:function(s,t,a){"use strict";a.r(t);var n=a(29),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"vue-原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-原理"}},[s._v("#")]),s._v(" vue 原理")]),s._v(" "),n("blockquote",[n("p",[s._v("对于原理的东西，其实有深有浅，此文尽量凭一己之力根据现在文档简单的讲清楚")])]),s._v(" "),n("p",[s._v("写个 list")]),s._v(" "),n("ul",[n("li",[s._v("vue 双向绑定原理")]),s._v(" "),n("li",[s._v("vue 响应式更新原理")]),s._v(" "),n("li",[s._v("虚拟 dom 算法 diff")]),s._v(" "),n("li",[s._v("vue 渲染函数，模版编译")])]),s._v(" "),n("h2",{attrs:{id:"数据绑定原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据绑定原理"}},[s._v("#")]),s._v(" 数据绑定原理")]),s._v(" "),n("blockquote",[n("p",[s._v("单向绑定，在 vue 中，一般页面使用"),n("code",[s._v("{{}}")]),s._v("引用变量的操作就是单向绑定，数据只会从"),n("code",[s._v("data")]),s._v("传递到页面，故称为单向绑定。"),n("br"),s._v("\n双向绑定是在单向绑定基础上，把 dom 上的修改变化传递会"),n("code",[s._v("data")]),s._v("，这样数据的改动既可以从页面到 js 也可以从 js 到页面，故称为双向绑定。")])]),s._v(" "),n("ol",[n("li",[s._v("数据从 js 到页面")])]),s._v(" "),n("p",[s._v("基本原理是数据劫持+依赖收集，这里不展开，往后介绍")]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[s._v("数据从页面到 js")])]),s._v(" "),n("blockquote",[n("p",[s._v("需要说明的是，双向绑定一般只针对表单控件，因为需要依照表单的 webapi 事件。")])]),s._v(" "),n("p",[s._v("利用表单控件的 "),n("code",[s._v("oninput")]),s._v("、"),n("code",[s._v("onchange")]),s._v(" 等事件,把控件数据的修改变化重新赋值回 js。")]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("p",[n("code",[s._v("v-model")]),s._v("只是一个语法糖，其本质是包含"),n("code",[s._v("v-bind")]),s._v("的数据单向传递和"),n("code",[s._v("input")]),s._v("事件中数据对象的重新赋值。\n在自定义组件时，可自定义 model 属性，提供 v-model 双向绑定")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[s._v("  model"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    prop"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'checked'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    event"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'change'")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])])]),s._v(" "),n("h2",{attrs:{id:"响应式更新原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#响应式更新原理"}},[s._v("#")]),s._v(" 响应式更新原理")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("Object.defineProperty()")]),s._v(" "),n("p",[s._v("老生常谈 es5 的一个数据劫持 api"),n("code",[s._v("Object.defineProperty()")]),s._v("，把数据转化为"),n("code",[s._v("getter/setter")]),s._v("，使得数据获取以及修改都执行对应的函数。")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("data")]),s._v("数据转化")]),s._v(" "),n("p",[s._v("当你把一个普通的 "),n("code",[s._v("JavaScript")]),s._v(" 对象传入 Vue 实例作为 "),n("code",[s._v("data")]),s._v(" 选项，Vue 将遍历此对象所有的 "),n("code",[s._v("property")]),s._v("，并使用 "),n("code",[s._v("Object.defineProperty")]),s._v(" 把这些 "),n("code",[s._v("property")]),s._v(" 全部转为 getter/setter。Object.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 "),n("code",[s._v("IE8")]),s._v("以及更低版本浏览器的原因。")])]),s._v(" "),n("li",[n("p",[s._v("依赖收集"),n("br"),s._v("\n每个组件实例都对应一个 "),n("code",[s._v("watcher")]),s._v(" 实例，它会在组件渲染的过程中把“接触”过的数据 "),n("code",[s._v("property")]),s._v(" 记录为依赖。之后当依赖项的 "),n("code",[s._v("setter")]),s._v(" 触发时，会通知 "),n("code",[s._v("watcher")]),s._v("，从而使它关联的组件重新渲染。")])])]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("p",[s._v("其实这里涉及到一个叫做观察者模式的设计模式，设计模式在本站会有详细描述。")])]),s._v(" "),n("p",[s._v("基于 javascript 会存在一些问题")]),s._v(" "),n("ul",[n("li",[s._v("对象")])]),s._v(" "),n("p",[s._v("由于 vue 是在创建的时候转化 getter/setter，因此创建之后再往 data 添加属性就不是响应式。"),n("br"),s._v("\n可使用"),n("code",[s._v("this.$set")]),s._v("或"),n("code",[s._v("vue.set()")]),s._v("手动添加对象的响应式。")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("数组"),n("br"),s._v("\n对于数据，因为性能的原因，vue 不能监听直接用索引下标设置值以及手动修改数据长度。")]),s._v(" "),n("p",[s._v("对于前者，可使用"),n("code",[s._v("set()")]),s._v("api 设置，或"),n("code",[s._v("splice()")]),s._v("数据方法。\n对于后者，可使用"),n("code",[s._v("splice()")])])])]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("p",[s._v("Vue 将被侦听的数组的变更方法进行了包裹,所以它们也将会触发视图更新。这些被包裹过的方法包括:push() pop() shift() unshift() splice() sort() reverse()。")])]),s._v(" "),n("h2",{attrs:{id:"虚拟-dom-和-diff-算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-dom-和-diff-算法"}},[s._v("#")]),s._v(" 虚拟 dom 和 diff 算法")]),s._v(" "),n("ul",[n("li",[s._v("虚拟 dom"),n("br"),s._v("\n虚拟 dom 是用 js 对象模拟真实 dom，本质是一个 js 数据。就这么简单 😭")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("diff 算法"),n("br"),s._v("\nDiff 算法是一种"),n("code",[s._v("对比算法")]),s._v("。对比两者是"),n("code",[s._v("旧虚拟 DOM")]),s._v(" 和"),n("code",[s._v("新虚拟 DOM")]),s._v("，对比出是哪个虚拟节点更改了，找出这个虚拟节点，并只更新这个虚拟节点所对应的真实节点，而不用更新其他数据没发生改变的节点，实现精准地更新真实 DOM，进而提高效率 🐮🍺")])]),s._v(" "),n("li",[n("p",[s._v("高效更新 dom"),n("br"),s._v("\n虚拟 dom+diff 算法，对比计算出更改的部分，然后只针对这部分做修改，可以最大程度减少页面重绘和重排。👍")])]),s._v(" "),n("li",[n("p",[s._v("Diff 算法的原理")]),s._v(" "),n("blockquote",[n("p",[s._v("其实就是对比的方式、对比的流程")])])])]),s._v(" "),n("ol",[n("li",[s._v("Diff 同层对比"),n("br"),s._v("\n新旧虚拟 DOM 对比的时候，Diff 算法比较只会在同层级进行, 不会跨层级比较。 所以 Diff 算法是:"),n("code",[s._v("深度优先算法")]),s._v("。 时间复杂度:"),n("code",[s._v("O(n)")])]),s._v(" "),n("li",[s._v("对比流程"),n("br"),s._v("\n当数据改变时，会触发"),n("code",[s._v("setter")]),s._v("，并且通过 "),n("code",[s._v("Dep.notify")]),s._v(" 去通知所有订阅者 Watcher，订阅者们就会调用 "),n("code",[s._v("patch")]),s._v(" 方法，给真实 DOM 打补丁，更新相应的视图。")])]),s._v(" "),n("p",[n("strong",[s._v("重点概念图")])]),s._v(" "),n("img",{attrs:{src:a(402)}}),s._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[n("p",[n("code",[s._v("patch 方法")]),s._v("\n这个方法作用就是，对比当前同层的虚拟节点是否为同一种类型的标签：")]),s._v(" "),n("ul",[n("li",[s._v("是：继续执行 patchVnode 方法进行深层比对")]),s._v(" "),n("li",[s._v("否：没必要比对了，直接整个节点替换成新虚拟节点")])])]),s._v(" "),n("li",[n("p",[n("code",[s._v("sameVnode 方法")]),s._v("\npatch 关键的一步就是 sameVnode 方法判断是否为"),n("code",[s._v("同一类型节点")]),s._v("😊")])])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sameVnode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("oldVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" newVnode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    oldVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" newVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// key 值是否一样")]),s._v("\n    oldVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tagName "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" newVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tagName "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 标签名是否一样")]),s._v("\n    oldVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("isComment "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" newVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("isComment "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 是否都为注释节点")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("isDef")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("isDef")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("newVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 是否都定义了 data")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sameInputType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("oldVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" newVnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当标签为 input 时，type 必须是否相同")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"patchvnode-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#patchvnode-方法"}},[s._v("#")]),s._v(" patchVnode 方法")]),s._v(" "),n("p",[s._v("这个函数做了以下事情：")]),s._v(" "),n("ul",[n("li",[s._v("找到对应的真实 DOM，称为 "),n("code",[s._v("el")])]),s._v(" "),n("li",[s._v("判断 "),n("code",[s._v("newVnode")]),s._v(" 和 "),n("code",[s._v("oldVnode")]),s._v(" 是否指向同一个对象，如果是，那么直接 return")]),s._v(" "),n("li",[s._v("如果他们都有文本节点并且不相等，那么将 "),n("code",[s._v("el")]),s._v(" 的文本节点设置为 "),n("code",[s._v("newVnode")]),s._v(" 的文本节点。")]),s._v(" "),n("li",[s._v("如果 "),n("code",[s._v("oldVnode")]),s._v(" 有子节点而 "),n("code",[s._v("newVnode")]),s._v(" 没有，则删除 "),n("code",[s._v("el")]),s._v(" 的子节点")]),s._v(" "),n("li",[s._v("如果 "),n("code",[s._v("oldVnode")]),s._v(" 没有子节点而 "),n("code",[s._v("newVnode")]),s._v(" 有，则将 "),n("code",[s._v("newVnode")]),s._v(" 的子节点真实化之后添加到 "),n("code",[s._v("el")])]),s._v(" "),n("li",[s._v("如果两者都有子节点，则执行 "),n("code",[s._v("updateChildren")]),s._v(" 函数比较子节点，这一步很重要")])]),s._v(" "),n("h3",{attrs:{id:"updatechildren-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#updatechildren-方法"}},[s._v("#")]),s._v(" updateChildren 方法")]),s._v(" "),n("p",[s._v("这是 patchVnode 里最重要的一个方法，新旧虚拟节点的子节点对比，就是发生在 updateChildren 方法中")]),s._v(" "),n("img",{attrs:{src:a(403)}}),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("p",[s._v("上面的例子是 newCh 比 oldCh 多，假如相反，是 oldCh 比 newCh 多的话，那就是 newCh 先走完循环，然后 oldCh 会有多出的节点，结果会在真实 DOM 里进行删除这些旧节点。")])]),s._v(" "),n("h3",{attrs:{id:"v-for-使用-index-作-key"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#v-for-使用-index-作-key"}},[s._v("#")]),s._v(" v-for 使用 index 作 key")]),s._v(" "),n("p",[s._v("简单讲会影响性能，因为 diff 算法原理的缘故，可能会导致不必要 dom 更新。\n"),n("img",{attrs:{src:a(404)}})]),s._v(" "),n("h3",{attrs:{id:"自我小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自我小结"}},[s._v("#")]),s._v(" 自我小结")]),s._v(" "),n("p",[s._v("其实上述内容都是依据 "),n("a",{attrs:{href:"https://juejin.cn/post/6994959998283907102"}},[s._v("15 张图，20 分钟吃透 Diff 算法核心原理，我说的！！！ ")]),n("br"),s._v("\n简单来说，虚拟 dom+diff 算法可以用来实现以最小开销更新页面，再补充 🦑 溪对于页面数据更新性能的理解"),n("a",{attrs:{href:"https://www.zhihu.com/question/31809713/answer/53544875"}},[s._v("看 🦑 溪的回答")]),n("br"),s._v("\n总的来说，vue 采用虚拟 dom+diff 算法是均衡考虑，而上文也结合 🌰 说明 diff 算法全过程，个中涉及算法，同时也解决了很多代码层面上表现应避开的缺陷。")]),s._v(" "),n("h2",{attrs:{id:"vue-渲染"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-渲染"}},[s._v("#")]),s._v(" vue 渲染")]),s._v(" "),n("h3",{attrs:{id:"渲染流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#渲染流程"}},[s._v("#")]),s._v(" 渲染流程")]),s._v(" "),n("img",{attrs:{src:a(405)}}),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("p",[s._v("vue 包括包括两种版本，运行时 + 编译器 和 只包含运行时，编译器用来把 vue 模版编译成 render 函数，就是上图的 compile()")])]),s._v(" "),n("p",[s._v("本小节侧重讲解 vue 在整个生命周期中，渲染部分，其余生命周期钩子不展开。")]),s._v(" "),n("h4",{attrs:{id:"mount"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mount"}},[s._v("#")]),s._v(" "),n("code",[s._v("$mount")])]),s._v(" "),n("p",[s._v("在 new Vue()实例时，如果存在"),n("code",[s._v("el")]),s._v("选项，实例将立即进入编译过程，否则，需要显式调用 vm.$mount() 手动开启编译。\n可见上图"),n("code",[s._v("$mount")]),s._v(" 是进入编译状态，编译模版语法。")]),s._v(" "),n("h4",{attrs:{id:"compile-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compile-方法"}},[s._v("#")]),s._v(" "),n("code",[s._v("compile()方法")])]),s._v(" "),n("p",[s._v("Vue 的模板编译是在 "),n("code",[s._v("$mount")]),s._v(" 的过程中进行的，在 $mount 的时候执行了 "),n("code",[s._v("compile")]),s._v(" 这个方法来将 "),n("code",[s._v("template")]),s._v(" 里的内容转换成 "),n("code",[s._v("render")]),s._v(" 函数，等待调用。")]),s._v(" "),n("p",[s._v("compile 含有三个阶段：")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("parse 函数解析 template")]),s._v(" "),n("p",[s._v("parse 函数里定义了许多的正则表达式，通过对标签名开头、标签名结尾、属性字段、文本内容等等的递归匹配。把字符串类型的 template 转化成了树状结构的 AST（抽象语法树）。")])]),s._v(" "),n("li",[n("p",[s._v("标记静态根节点")]),s._v(" "),n("p",[s._v("对 parse 生成的 AST 进行静态内容的优化。静态内容指的是和数据没有关系，不需要每次都刷新的内容。标记静态节点的作用是为了在后面做 Vnode 的 diff 时起作用，用来确认一个节点是否应该做 patch 还是直接跳过。")])]),s._v(" "),n("li",[n("p",[s._v("generate 函数创建 render 函数字符串")]),s._v(" "),n("p",[s._v("通过 generate 函数，递归 AST，为每个 AST 节点生成 render 函数。")])])]),s._v(" "),n("h4",{attrs:{id:"watcher"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#watcher"}},[s._v("#")]),s._v(" "),n("code",[s._v("watcher")])]),s._v(" "),n("p",[s._v("编译后生成 render 函数，执行后就会生成虚拟 dom，同时 new watcher(),收集依赖集合一起，这里埋个坑，交给设计模式。（上面响应式原理也有讲到，是同一个东西）")]),s._v(" "),n("p",[s._v("参考链接 🔗 "),n("a",{attrs:{href:"https://blog.csdn.net/qq_40413670/article/details/117714765",target:"__brank"}},[s._v("vue 中三种 watcher")])]),s._v(" "),n("h4",{attrs:{id:"patch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#patch"}},[s._v("#")]),s._v(" "),n("code",[s._v("patch")])]),s._v(" "),n("p",[s._v("当 setter 数据有更新时，执行重新生成 new vdom 结合 diff 算法，上面也有讲到。")]),s._v(" "),n("h3",{attrs:{id:"compile-详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compile-详解"}},[s._v("#")]),s._v(" compile 详解")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://blog.csdn.net/wang729506596/article/details/90947583",target:"__brank"}},[s._v("compile 详解参考文章")])]),s._v(" "),n("p",[n("strong",[s._v("parse 函数")]),s._v("\n在了解 parse 的过程之前，我们需要了解 AST，"),n("code",[s._v("AST")]),s._v(" 的全称是 Abstract Syntax Tree，也就是所谓抽象语法树，用来表示代码的数据结构。在 Vue 中我把它理解为嵌套的、携带标签名、属性和父子关系的 JS 对象，以树来表现 DOM 结构。")]),s._v(" "),n("p",[s._v("vue 中的 ast 类型有以下 3 种:")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[s._v("ASTElement "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// AST标签元素")]),s._v("\n  type"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  tag"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  attrsList"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" value"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" any "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  attrsMap"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" any "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  parent"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ASTElement "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  children"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("ASTNode"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\nASTExpression "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// AST表达式 {{ }}")]),s._v("\n  type"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  expression"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  text"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  tokens"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Array"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("string "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Object"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" boolean"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nASTText "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// AST文本")]),s._v("\n  type"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  text"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" boolean"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  isComment"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" boolean"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("p",[s._v("通过 children 字段来形成一种层层嵌套的树状结构。vue 中定义了许多正则(判断标签开始、结束、属性、vue 指令、文本)，通过对 html 内容进行递归正则匹配，对满足条件的字符串进行截取。把字符串类型的 html 转换位 AST 结构")]),s._v(" "),n("blockquote",[n("p",[s._v("parse 函数的作用就是把字符串型的 template 转化为 AST 结构")])]),s._v(" "),n("p",[s._v("🌰")]),s._v(" "),n("div",{staticClass:"language-html line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("div")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("id")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')]),s._v("“test”"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("texttext"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("div")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("转化为")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[s._v("ele1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  type"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  tag"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"div"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  attrsList"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"id"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"test"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  attrsMap"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" id"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"test"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  parent"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  children"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      type"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      text"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"texttext"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  plain"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  attrs"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"id"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"'test'\"")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("简单来说，template 的 parse 过程，其实就是不断的截取字符串并解析它们的过程。")]),s._v(" "),n("p",[s._v("在此过程中，如果截取到非闭合标签就 push 到 stack 中，如果截取道结束标签就把这个标签 pop 出来。")]),s._v(" "),n("p",[n("strong",[s._v("optimize 优化")]),s._v("\noptimize 的作用主要是对生成的 AST 进行静态内容的优化，标记静态节点。所谓静态内容，指的是和数据没有关系，不需要每次都更新的内容。"),n("br"),s._v("\n标记静态节点的作用的作用是为了之后 dom diff 时，是否需要 patch，diff 算法会直接跳过静态节点，从而减少了比较的过程，优化了 patch 的性能。")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1. 如果是表达式AST节点，直接返回 false\n2. 如果是文本AST节点，直接返回 true\n3. 如果元素是元素节点，阶段有 v-pre 指令 ||\n  1. 没有任何指令、数据绑定、事件绑定等 &amp;&amp;\n  2. 没有 v-if 和 v-for &amp;&amp;\n  3. 不是 slot 和 component &amp;&amp;\n  4. 是 HTML 保留标签 &amp;&amp;\n  5. 不是 template 标签的直接子元素并且没有包含在 for 循环中\n  则返回 true\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("简单来说，没有使用 vue 独有的语法的节点就可以称为静态节点")]),s._v(" "),n("p",[s._v("判断一个父级元素是静态节点，则需要判断它的所有子节点都是静态节点，否则就不是静态节点")]),s._v(" "),n("p",[s._v("标记静态节点的过程是一个不断递归的过程")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" l "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" l"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" child "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("markStatic")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("child"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("child"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("static"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("static "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("markStatic 方法是用来标记静态节点的方法，它会不断的循环 children,如果 children 还有 children，则走相同的逻辑。这样所有的节点都会被打上标记。")]),s._v(" "),n("p",[s._v("在循环中会判断，子节点是否为静态节点，如果不是则其父节点不是静态节点。")]),s._v(" "),n("p",[n("strong",[s._v("generate 生成 render 函数")]),s._v("\ngenerate 是将 AST 转化成 render funtion 字符串的过程，他递归了 AST，得到结果是 render 的字符串。\nrender 函数的就是返回一个_c(‘tagName’,data,children)的方法")]),s._v(" "),n("ol",[n("li",[s._v("第一个参数是标签名")]),s._v(" "),n("li",[s._v("第二个参数是他的一些数据，包括属性/指令/方法／表达式等等。")]),s._v(" "),n("li",[s._v("第三个参数是当前标签的子标签,同样的，每一个子标签的格式也是_c(‘tagName’,data,children)。")])]),s._v(" "),n("p",[s._v("generate 就是通过不断递归形成了这么一种树形结构。")]),s._v(" "),n("img",{attrs:{src:a(406)}}),s._v(" "),n("ol",[n("li",[s._v("genElement：用来生成基本的 render 结构或者叫 createElement 结构")]),s._v(" "),n("li",[s._v("genData: 处理 ast 结构上的一些属性，用来生成 data")]),s._v(" "),n("li",[s._v("genChildren:处理 ast 的 children,并在内部调用 genElement,形成子元素的_c()方法")])]),s._v(" "),n("p",[s._v("render 字符串内部有几种方法:")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("几种内部方法\n_c：对应的是 createElement 方法，顾名思义，它的含义是创建一个元素(Vnode)\n_v：创建一个文本结点。\n_s：把一个值转换为字符串。（eg: {{data}}）\n_m：渲染静态内容\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('🌰\n<template>\n  <div id="app">\n    {{val}}\n    <img src="http://xx.jpg">\n  </div>\n</template>\n\n{\n  render: with(this) {\n    return _c(\'div\', {\n      attrs: {\n        "id": "app"\n      }\n    }, [_v("\\n" + _s(val) + "\\n"),\n        _c(\'img\', {\n              attrs: {\n                "src": ""\n              }\n            })\n        ]\n    )\n  }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("blockquote",[n("p",[s._v("vue template 模板编译的过程经过 parse()生成 ast(抽象语法树),optimize 对静态节点优化，generate()生成 render 字符串")])]),s._v(" "),n("h3",{attrs:{id:"ast-抽象语法树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ast-抽象语法树"}},[s._v("#")]),s._v(" AST（抽象语法树）")]),s._v(" "),n("p",[s._v("无论是代码编译（babel），打包（webpack），代码压缩，css 预处理，代码校验（eslint），代码美化（pretiier），Vue 中对 template 的编译，这些的实现都离不开 AST。")]),s._v(" "),n("blockquote",[n("p",[s._v("我的理解就是把高级语言语法转化为更有规律更低一层的语法树。")])]),s._v(" "),n("h4",{attrs:{id:"什么是-ast"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是-ast"}},[s._v("#")]),s._v(" 什么是 AST")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/6844904019505184776",target:"__brank"}},[s._v("参考链接 🔗 ")])]),s._v(" "),n("p",[s._v("AST 是对源代码的抽象语法结构的树状表现形式。")]),s._v(" "),n("p",[s._v("在不同的场景下，会有不同的解析器将源码解析成抽象语法树。")]),s._v(" "),n("p",[s._v("🌰")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" answer "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("转化")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"type"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Program"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"body"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"type"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"VariableDeclaration"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"declarations"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"type"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"VariableDeclarator"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"id"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"type"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Identifier"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                        "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"answer"')]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"init"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"type"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"BinaryExpression"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                        "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"operator"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                        "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"left"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                            "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"type"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Literal"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                            "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"value"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                            "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"raw"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),s._v("\n                        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                        "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"right"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                            "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"type"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Literal"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                            "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"value"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                            "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"raw"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),s._v("\n                        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"kind"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"let"')]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sourceType"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"script"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br")])]),n("h4",{attrs:{id:"ast-是如何生成的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ast-是如何生成的"}},[s._v("#")]),s._v(" AST 是如何生成的")]),s._v(" "),n("p",[s._v("AST 是通过 JS Parser （解析器），将 js 源码转化为抽象语法树，主要分为两步")]),s._v(" "),n("ol",[n("li",[s._v("分词\n将整个的代码字符串，分割成语法单元数组（token）。 JS 中的语法单元（token）指标识符（function，return），运算符，括号，数字，字符串等能解析的最小单元。主要有以下几种：")])]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("标识符\n没有被引号括起来的连续字符，可以包含字母、数字、_、$，其中数字不能作为开头。\n标识符可能是var，return，function等关键字，也可能是true，false这样的内置常量，或是一个变量。具体是哪种语义，分词阶段不区分，只要正确拆分即可。\n\n数字\n十六进制，十进制，八进制以及科学表达式等都是最小单元\n\n运算符： +、-、 *、/ 等\n\n字符串 对计算机而言，字符串只会参与计算和展示，具体里面细分没必要分析\n\n注释  不管是行注释还是块注释，对于计算机来说并不关心其内容，所以可以作为不可再拆分的最小单元\n\n空格 连续的空格，换行，缩进等，只要不在字符串中都没有实际的逻辑意义，所以连续的空格可以作为一个语法单元。\n\n其他，大括号，中括号，小括号，冒号 等等。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("ol",{attrs:{start:"2"}},[n("li",[n("p",[s._v("语义分析")]),s._v(" "),n("p",[s._v("语义分析的目的是将分词得到的语法单元进行一个整体的组合，分析确定语法单元之间的关系。")]),s._v(" "),n("p",[s._v("简单来说，语义分析可以理解成对语句（statement）和表达式（expression）的识别。")]),s._v(" "),n("ol",[n("li",[s._v("语句，一个具备边界的代码区域。相邻的两个语句之间从语法上讲互不影响。比如： var a = 1; if(xxx){xxx}")]),s._v(" "),n("li",[s._v("表达式，指最终会有一个结果的一小段代码，它可以嵌入到另一个表达式中，且包含在表达式中。比如：a++， i > 0 && i< 6")])])])]),s._v(" "),n("p",[s._v("语义分析是一个递归的过程，它会将分词分析出来的数组转化成树形的表达形式。同时，会验证语法，语法如果存在错误的话，会抛出语法错误。")]),s._v(" "),n("h4",{attrs:{id:"应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[s._v("#")]),s._v(" 应用")]),s._v(" "),n("img",{attrs:{src:a(407)}}),s._v(" "),n("img",{attrs:{src:a(408)}}),s._v(" "),n("blockquote",[n("p",[s._v("感觉很厉害 👍")])])])}),[],!1,null,null,null);t.default=e.exports}}]);